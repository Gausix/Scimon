{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Unleash your knowledge.</p> <p> </p> <p> </p>"},{"location":"#what-is-scimon","title":"What is Scimon?","text":"<p>Scimon is a tool designed for batch downloading PDF files using its own dedicated language, Monset (.mon). Monset features a very simple and quick-to-write syntax, making it easy to use. The Scimon interpreter is both fast and secure, as it is written in Rust, leveraging the language's best practices.</p>"},{"location":"#what-is-monset","title":"What is Monset?","text":"<p>Monset is a language designed specifically for downloading files. It offers a streamlined syntax that makes the process of retrieving files from the internet straightforward and efficient. By focusing on simplicity, Monset ensures that users can quickly grasp its fundamentals and start downloading files with minimal effort.</p> <p>The key strength of Monset lies in its user-friendly design. The syntax is intuitive, reducing the learning curve typically associated with programming languages. This makes it accessible to both beginners and experienced developers, allowing them to integrate file downloading capabilities into their projects seamlessly. Monset abstracts the complexities involved in file transfers, providing a clear and concise way to handle downloads.</p>"},{"location":"#example-of-code-and-execute","title":"Example of code and execute","text":"<pre><code>path \"downloads/\"\nopen \"https://github.com/kremilly\"\n\ncompress \"folder.zip\"\n\ncovers \"covers/\"\n\nqrcode \"qrcodes/\"\n\nprint \"Hello, World!\"\n\nmath \"2 + 2 = 4\" &gt; path/to/output.png\n\nstyle \"https://raw.githubusercontent.com/sindresorhus/github-markdown-css/main/github-markdown.css\"\n\nreadme \"https://gist.githubusercontent.com/Kremilly/5fd360d994bb0fe108b648d0e4c9e92f/raw/5f180716411e11fc352188c805c0707ac96d70a0/readme-example.md\"\n\ndownloads {\n    https://arxiv.org/pdf/2405.01513 !ignore\n    https://olacesar.com/e-books/protegido.pdf !ignore\n    https://raw.githubusercontent.com/facebook/react/main/README.md\n    https://pt.wikisource.org/wiki/Manifesto_da_Guerrilha_do_Livre_Acesso !ignore\n}\n\ncommands {\n    https://gist.githubusercontent.com/Kremilly/e0e0db11e43269da179adab610f38bb1/raw/6820be26a936a54bac713d03deb49edf804d0b6b/index.py\n}\n</code></pre> <p>[!note]</p> <p>Save as <code>scimon.mon</code></p> <p>Run the command:</p> <pre><code>scimon -r scimon.mon\n</code></pre>"},{"location":"basic-usage/","title":"Basic Usage","text":"<p>You can download files using a local or remote list with <code>scimon</code>. Here are the instructions for both methods:</p>"},{"location":"basic-usage/#downloading-files","title":"Downloading Files","text":"<p>To download files specified in a local list, use the following command:</p> <pre><code>scimon -r scimon.mon\n</code></pre>"},{"location":"basic-usage/#downloading-files-with-a-remote-list","title":"Downloading Files with a Remote List","text":"<p>To download files specified in a remote list, use the following command:</p> <pre><code>scimon -r https://example.com/scimon.mon\n</code></pre>"},{"location":"basic-usage/#useful-flags-for-download-list","title":"Useful Flags for Download List","text":"<p>There are several flags available to customize the download process. Here are some commonly used ones:</p>"},{"location":"basic-usage/#download-without-skipping-any-files","title":"Download Without Skipping Any Files","text":"<p>Use the <code>--no-ignore</code> flag to download all files without skipping any:</p> <pre><code>scimon -r scimon.mon --no-ignore\n</code></pre>"},{"location":"basic-usage/#skip-all-comments","title":"Skip All Comments","text":"<p>Use the <code>--no-comments</code> flag to skip downloading lines that are comments:</p> <pre><code>scimon -r scimon.mon --no-comments\n</code></pre>"},{"location":"basic-usage/#skip-readme-file-rendering","title":"Skip README File Rendering","text":"<p>Use the <code>--no-readme</code> flag to skip rendering README files during the download process:</p> <pre><code>scimon -r scimon.mon --no-readme\n</code></pre> <p>By using these flags, you can control how <code>scimon</code> handles different parts of the download list, ensuring a customized download process according to your needs.</p>"},{"location":"build/","title":"How to Build","text":""},{"location":"build/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>If you don't already have the project on your local machine, you need to clone the repository from Git. Open a terminal and run:</p> <pre><code>git clone https://github.com/Scibun/Scimon.git\n</code></pre>"},{"location":"build/#2-setup-your-environment","title":"2. Setup Your Environment","text":"<p>Ensure that Rust and Cargo are installed and added to your system's PATH. You can check this by running:</p> <pre><code>rustc --version\ncargo --version\n</code></pre> <p>If Rust and Cargo are properly installed, these commands should return the version numbers.</p>"},{"location":"build/#3-navigate-to-your-project-directory","title":"3. Navigate to Your Project Directory","text":"<p>Open a terminal and navigate to the root directory of your Rust project. For example:</p> <pre><code>cd Scimon\n</code></pre> <p>If you just cloned the repository, navigate to the newly created directory:</p> <pre><code>cd Scimon\n</code></pre>"},{"location":"build/#4-build-the-project","title":"4. Build the Project","text":"<p>To build the project, simply run:</p> <pre><code>cargo build\n</code></pre> <p>This command compiles your project and places the output binaries in the <code>target/debug</code> directory. You should see output similar to:</p> <pre><code>Compiling scimon v0.1.0 (/path/to/your/project)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.34s\n</code></pre>"},{"location":"build/#5-run-the-project","title":"5. Run the Project","text":"<p>To run the project after building it, use:</p> <pre><code>cargo run\n</code></pre> <p>This command builds and runs the project in one step.</p>"},{"location":"build/#6-building-for-release","title":"6. Building for Release","text":"<p>If you want to build an optimized release version of your project, run:</p> <pre><code>cargo build --release\n</code></pre> <p>This command compiles your project with optimizations and places the output binaries in the <code>target/release</code> directory. The output will be similar to:</p> <pre><code>Compiling scimon v0.1.0 (/path/to/your/project)\n    Finished release [optimized] target(s) in 2m 13s\n</code></pre>"},{"location":"build/#additional-commands","title":"Additional Commands","text":"<ul> <li>Clean the Project: To remove the <code>target</code> directory and clean the project, run:   <pre><code>cargo clean\n</code></pre></li> <li>Run Tests: To run tests defined in your project, use:   <pre><code>cargo test\n</code></pre></li> </ul>"},{"location":"build/#summary","title":"Summary","text":"<ol> <li>Clone the repository:    <pre><code>git clone https://github.com/Scibun/Scimon.git\ncd Scimon\n</code></pre></li> <li>Setup your environment:    <pre><code>rustc --version\ncargo --version\n</code></pre></li> <li>Navigate to your project directory (if not already there):    <pre><code>cd Scimon\n</code></pre></li> <li>Build the project:    <pre><code>cargo build\n</code></pre></li> <li>Run the project:    <pre><code>cargo run\n</code></pre></li> <li>For a release build:    <pre><code>cargo build --release\n</code></pre></li> </ol> <p>By following these steps, you can successfully clone, build, and run your Scimon.</p>"},{"location":"env-file/","title":".env file","text":"<p>xxxxx</p>"},{"location":"external-resources/","title":"External Resources Usage","text":"<p>This library accesses the following external resources:</p> <p>Scibun:</p> <ul> <li>addons.scibun.com</li> <li>template.scibun.com</li> </ul> <p>This API provides additional functionality or data support for the library.</p> <p>Wikipedia and Wikisource:</p> <ul> <li>wikipedia.org</li> <li>wikisource.org</li> </ul> <p>This domain provides download of wiki pages and documents.</p> <p>GitHub:</p> <ul> <li>raw.githubusercontent.com</li> </ul> <p>This domain is necessary to download the configuration files.</p>"},{"location":"providers/","title":"Providers","text":""},{"location":"providers/#providers-compatible-with-scimon","title":"Providers Compatible with Scimon","text":"<p>Scimon is compatible with various providers, enabling it to access and retrieve data from different sources. These providers include:</p> <ul> <li>Arxiv.org: A popular repository for research papers in various fields of science.</li> <li>NASA: The National Aeronautics and Space Administration, providing information and resources related to space exploration and aeronautics.</li> <li>SciELO: A digital library covering a wide range of scientific journals from Latin America, Spain, Portugal, and South Africa.</li> <li>Wikipedia: A free online encyclopedia covering a vast array of topics in multiple languages.</li> <li>Wikisource: A Wikimedia project that hosts free-content textbooks, source texts, and other material.</li> </ul> <p>These providers offer diverse content and resources, ranging from research papers and academic articles to general knowledge and reference materials. Scimon leverages its compatibility with these providers to access and utilize information from various sources, enhancing its functionality and versatility for users.</p>"},{"location":"scrape/","title":"Scrape","text":""},{"location":"scrape/#scrape-option","title":"Scrape Option","text":"<p>The <code>--scrape</code> option in Scimon enables scraping functionality, allowing you to extract information or data from a specified URL.</p>"},{"location":"scrape/#usage","title":"Usage:","text":"<p>To initiate a scraping operation on a specific URL, you use the <code>--url</code> flag followed by the URL you want to scrape, along with the <code>--scrape</code> flag.</p>"},{"location":"scrape/#example-command","title":"Example Command:","text":"<pre><code>scimon --url https://scibun.com --scrape\n</code></pre> <p>In this command:</p> <ul> <li><code>https://scibun.com</code> should be replaced with the URL you want to perform the scraping on.</li> </ul>"},{"location":"scrape/#functionality","title":"Functionality:","text":"<p>When you execute the command with the <code>--url</code> and <code>--scrape</code> flags, Scimon will visit the specified URL and extract relevant information based on predefined scraping rules or patterns.</p>"},{"location":"scrape/#result","title":"Result:","text":"<p>The result of the scraping operation depends on the specific implementation and configuration of Scimon. It could involve extracting text, images, links, or other structured data from the webpage.</p>"},{"location":"scrape/#additional-notes","title":"Additional Notes:","text":"<ul> <li>Scimon provides flexibility in configuring scraping rules and patterns to suit your specific requirements.</li> <li>Ensure that you have proper permissions or authorization to scrape the content of the specified URL to comply with legal and ethical guidelines.</li> </ul> <p>By utilizing the <code>--scrape</code> option in Scimon, you can automate the process of extracting valuable information from webpages, streamlining tasks such as data collection, content aggregation, and web monitoring.</p>"},{"location":"configs/env-file/","title":".env file","text":""},{"location":"configs/env-file/#open-env-file","title":"Open .env file","text":"<p>To open .env file, simply use run:</p> <pre><code>scimon --options open-env\n</code></pre>"},{"location":"configs/env-file/#env-file-locations-in-operations-systems","title":".env file locations in Operations Systems:","text":"System Location Linux <code>home/&lt;YOUR_USERNAME&gt;/.config/scimon/.env</code> MacOS <code>/Users/&lt;YOUR_USERNAME&gt;/Library/Application Support/scimon/.env</code> Windows <code>C:\\Users\\&lt;YOUR_USERNAME&gt;\\AppData\\Roaming\\scimon\\.env</code>"},{"location":"configs/env-file/#environments-of-system","title":"Environments of system","text":"Name Description MONLIB_API_KEY Your API key for access Scimon (<code>Under in development</code>)"},{"location":"configs/scimon.yml-file/","title":"Scimon.yml file","text":"<p>This configuration file is utilized to set up the tool. Please utilize this default version if any alterations you make result in issues.</p> <pre><code>general:\n  default_text_editor: 'notepad' # String (default: 'notepad')\n  urlfilter_open: false # Boolean (valid values: 'true' or 'false'; default: 'false')\n\nui:\n  show_header: true # Boolean (valid values: 'true' or 'false'; default: 'true')\n\nrender_markdown:\n  output_path: '{app_path}' # String (default: '{app_path}')\n  overwrite: true # Boolean (valid values: 'true' or 'false'; default: 'true')\n  minify_html: true # Boolean (valid values: 'true' or 'false'; default: 'true')\n</code></pre> <p>Save this file at the following location:</p> System Location Linux <code>home/&lt;YOUR_USERNAME&gt;/.config/scimon/scimon.yml</code> MacOS <code>/Users/&lt;YOUR_USERNAME&gt;/Library/Application Support/scimon/scimon.yml</code> Windows <code>C:\\Users\\&lt;YOUR_USERNAME&gt;\\AppData\\Roaming\\scimon\\scimon.yml</code>"},{"location":"monset/commands-block/","title":"Commands Block","text":"<p>This feature is <code>Experimental</code></p>"},{"location":"monset/commands-block/#command-usage-documentation","title":"Command Usage Documentation","text":""},{"location":"monset/commands-block/#purpose","title":"Purpose","text":"<p>The provided command <code>index.py</code> is used to perform a specific action or operation. In this case, it appears to be referencing a Python script named <code>index.py</code>.</p>"},{"location":"monset/commands-block/#usage","title":"Usage","text":"<p>To use this command, follow the syntax:</p> <pre><code>commands {\n    index.py\n}\n</code></pre> <p>Replace <code>index.py</code> with the actual name of the Python script you want to execute.</p>"},{"location":"monset/commands-block/#example","title":"Example","text":"<p>Suppose you have a Python script named <code>my_script.py</code> and you want to execute it using this command. Your configuration file would look like this:</p> <pre><code>commands {\n    my_script.py\n}\n</code></pre>"},{"location":"monset/commands-block/#scripts-files-locations-in-operations-systems","title":"Scripts files locations in Operations Systems:","text":"System Location Linux <code>home/&lt;YOUR_USERNAME&gt;/.config/scimon/scripts/</code> MacOS <code>/Users/&lt;YOUR_USERNAME&gt;/Library/Application Support/scimon/scripts/</code> Windows <code>C:\\Users\\&lt;YOUR_USERNAME&gt;\\AppData\\Roaming\\scimon\\scripts\\</code>"},{"location":"monset/commands-block/#notes","title":"Notes","text":"<ul> <li>Ensure that the Python script file (<code>index.py</code> in this case) exists in the current directory or provide the full path to the script.</li> <li>Make sure you have Python installed on your system and it is accessible from the command line.</li> <li>Only Python and JavaScript are supported.</li> </ul>"},{"location":"monset/compress/","title":"Compress folder","text":"<p>To compress a folder, you can use the variable <code>compress</code> and assign the compressed file name as its value. The folder will be compressed in the root directory of the project.</p> <pre><code>compress \"downloads.zip\"\n</code></pre>"},{"location":"monset/covers/","title":"Covers","text":"<p>To extract covers, use the following derivative:</p> <pre><code>covers \"path/to/covers\"\n</code></pre> <p>Covers depends on the <code>pdfium-render</code> binaries. Make sure to have the library installed in your machine. Click here to learn how to install it.</p> <p>Covers are extracted from the files and stored in the specified directory.</p>"},{"location":"monset/covers/#how-it-works","title":"How It Works","text":"<p>The <code>covers</code> derivative allows you to specify a directory or path where the covers of the files should be extracted and stored. Simply assign the desired path to the derivative.</p>"},{"location":"monset/download-block/","title":"Download's Block","text":""},{"location":"monset/download-block/#url-list","title":"URL List","text":"<p>You can specify multiple URLs for downloading files. Each URL should be placed on a new line. Optionally, you can append <code>!ignore</code> to a URL to indicate that it should be skipped during the download process.</p>"},{"location":"monset/download-block/#example-usage","title":"Example Usage:","text":"<pre><code>downloads {\n    https://example.com/file1.pdf !ignore\n    https://example.com/file2.pdf\n    https://example.com/file3.pdf !ignore\n    https://example.com/file4.pdf\n    https://example.com/file5.pdf !ignore\n    https://example.com/file6.pdf\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>https://example.com/file1.pdf</code> will be skipped because it is followed by <code>!ignore</code>.</li> <li><code>https://example.com/file2.pdf</code> will be downloaded.</li> <li><code>https://example.com/file3.pdf</code> will be skipped because it is followed by <code>!ignore</code>.</li> <li><code>https://example.com/file4.pdf</code> will be downloaded.</li> <li><code>https://example.com/file5.pdf</code> will be skipped because it is followed by <code>!ignore</code>.</li> <li><code>https://example.com/file6.pdf</code> will be downloaded.</li> </ul>"},{"location":"monset/download-block/#path-configuration","title":"Path Configuration","text":"<p>You can specify the directory where the downloaded files should be stored by setting the <code>path</code> variable. This ensures that all files are saved in the specified folder in your file system.</p>"},{"location":"monset/download-block/#example-usage_1","title":"Example Usage:","text":"<pre><code>path \"path/to/folder\"\n</code></pre> <p>In this example:</p> <ul> <li>All downloaded files will be stored in the directory <code>path/to/folder</code>.</li> </ul>"},{"location":"monset/download-block/#ignoring-specific-urls","title":"Ignoring Specific URLs","text":"<p>The <code>!ignore</code> macro allows you to skip specific URLs in your download list. This is useful if you have certain files that you do not want to download during a particular operation.</p>"},{"location":"monset/download-block/#example-usage_2","title":"Example Usage:","text":"<pre><code>https://example.com/file1.pdf !ignore\n</code></pre> <p>In this example:</p> <ul> <li>The URL <code>https://example.com/file1.pdf</code> will be omitted from the download process because it is followed by the <code>!ignore</code> directive.</li> </ul>"},{"location":"monset/download-block/#summary","title":"Summary","text":"<ol> <li>Download URLs: List URLs line by line. Append <code>!ignore</code> to skip specific URLs.</li> </ol> <p><pre><code>downloads {\n    https://example.com/file1.pdf !ignore\n    https://example.com/file2.pdf\n}\n</code></pre> 2. Set Download Directory: Define where the files should be saved using the <code>path</code> variable.</p> <p><pre><code>path \"path/to/folder\"\n</code></pre> 3. Skip Specific URLs: Use <code>!ignore</code> to bypass certain URLs.</p> <pre><code>https://example.com/file1.pdf !ignore\n</code></pre> <p>By following these instructions, you can efficiently manage your download list, specify storage directories, and selectively ignore certain files.</p>"},{"location":"monset/markdown-render/","title":"Markdown render","text":"<p>PrimeDown is a markdown rendering engine that enhances HTML content generated by the default Rust crate by injecting JavaScript plugins.</p>"},{"location":"monset/markdown-render/#features","title":"Features","text":"<p>PrimeDown now supports:</p> <ul> <li>Headers (h1 to h6)</li> <li>Links</li> <li>Bold, Italic, Strikethrough</li> <li>Images</li> <li>Tables</li> <li>Blockquotes</li> <li>Task lists</li> <li>Unordered and Ordered Lists</li> <li>Inline and Block Code (with syntax highlighting)</li> <li>MathJax formulas</li> <li>Mermaid diagrams</li> <li>HTML tags</li> </ul>"},{"location":"monset/markdown-render/#extra-features","title":"Extra Features","text":"<ul> <li>DocsSources</li> <li>Citations (References)</li> </ul> <p>Learn more about how to use Extras features here.</p>"},{"location":"monset/markdown-render/#file-formats-supported-by-docssources","title":"File Formats Supported by DocsSources:","text":"<ul> <li>.pdf</li> <li>.doc, .docx</li> <li>.epub, .mobui</li> <li>.rst, .yml, .yaml, .toml, .json</li> <li>.7z, .zip, .rar, .tar, .tar.gz, .gz</li> <li>.bin, .img</li> </ul>"},{"location":"monset/markdown-render/#third-party-libraries-loaded-on-readme-file-rendered","title":"Third-party Libraries Loaded on README File Rendered:","text":"<ul> <li>MathJax.js</li> <li>Mermaid.js</li> <li>Prism.js (with support for some programming languages)</li> </ul> <p>Markdown flags alerts (!note, !important, !warning...) are not supported yet.</p>"},{"location":"monset/markdown-render/#standard-directory-where-readmehtml-files-are-generated","title":"Standard Directory where README.html Files are Generated","text":"System Location Linux <code>home/&lt;YOUR_USERNAME&gt;/.config/scimon/readme</code> MacOS <code>/Users/&lt;YOUR_USERNAME&gt;/Library/Application Support/scimon/readme</code> Windows <code>C:\\Users\\&lt;YOUR_USERNAME&gt;\\AppData\\Roaming\\scimon\\readme</code>"},{"location":"monset/math/","title":"Math Formula Rendering","text":"<p>To render mathematical formulas into image files, use the following syntax:</p> <pre><code>math \"your_math_expression\" &gt; path/to/output.png\n</code></pre> <p>For example, to render the formula <code>2 + 2 = 4</code>, the command would look like this:</p> <pre><code>math \"2 + 2 = 4\" &gt; path/to/output.png\n</code></pre> <p>This command will generate an image of the math expression and save it to the specified file path. Make sure to replace <code>\"your_math_expression\"</code> with the actual math expression you want to render, and adjust the file path as needed.</p>"},{"location":"monset/open-links/","title":"Open links","text":""},{"location":"monset/open-links/#open-variable","title":"Open Variable","text":"<p>The <code>open</code> variable specifies a URL that Scimon will open in a web browser after processing the list file. This URL is typically used to provide additional information or resources related to the processed task or project.</p>"},{"location":"monset/open-links/#opening-urls","title":"Opening URLs:","text":"<p>After Scimon completes processing the list file, it automatically opens the URL specified in the <code>open</code> variable in a web browser.</p>"},{"location":"monset/open-links/#usage","title":"Usage:","text":"<p>The <code>open</code> variable is useful for directing users to relevant websites, documentation, or resources associated with the tasks or projects being processed.</p>"},{"location":"monset/open-links/#example-usage","title":"Example Usage:","text":"<pre><code>open \"https://example.com\"\n</code></pre> <p>In this example:</p> <ul> <li>The <code>open</code> variable is assigned the URL <code>\"https://scibun.com\"</code>.</li> <li>After processing the list file, Scimon will open this URL in a web browser, allowing users to access the GitHub repository associated with the task or project.</li> </ul> <p>By utilizing the <code>open</code> variable, you can seamlessly provide users with additional information and resources to enhance their understanding and engagement with the processed tasks or projects.</p>"},{"location":"monset/prints/","title":"Prints","text":"<p>The <code>print</code> variable is used to display messages to the user. It is useful if you want to show a message to the user who is downloading the list.</p> <pre><code>print \"Hello, World!\"\n</code></pre>"},{"location":"monset/qrcode/","title":"QR Code","text":"<p>To generate qr codes, use the following derivative:</p> <pre><code>qrcode \"path/to/qrcodes\"\n</code></pre>"},{"location":"monset/qrcode/#how-it-works","title":"How It Works","text":"<p>The <code>qrcode</code> derivative allows you to specify a directory or path where the QR codes should be generated and stored. Simply assign the desired path to the derivative.</p>"},{"location":"monset/readme-block/","title":"Readme Block","text":""},{"location":"monset/readme-block/#variable","title":"Variable","text":"<p>The <code>readme{}</code> block in the list file allows for the direct rendering of Markdown content within the list file itself.</p>"},{"location":"monset/readme-block/#fetching-content","title":"Fetching Content:","text":"<p>The URL specified in the <code>readme</code> variable is accessed to retrieve the Markdown content.</p>"},{"location":"monset/readme-block/#converting-to-text","title":"Converting to Text:","text":"<p>The retrieved content is then converted to text format. This text content is assumed to be in Markdown format.</p>"},{"location":"monset/readme-block/#rendering-markdown","title":"Rendering Markdown:","text":"<p>The Markdown content retrieved from the URL is rendered directly within the list file. This means that you can include Markdown snippets within the list file, and Paimon will automatically render them during processing.</p>"},{"location":"monset/readme-block/#example-usage","title":"Example Usage:","text":"<pre><code>readme \"http://example.com/readme.md\"\n</code></pre> <p>In this example:</p> <ul> <li>The <code>readme</code> variable is assigned the URL <code>\"http://example.com/readme.md\"</code>.</li> <li>Scimon will fetch the content from the specified URL and process it as described above.</li> </ul>"},{"location":"monset/readme-block/#block","title":"Block","text":"<p>The Markdown content retrieved from the URL is rendered directly within the list file. This means that you can include Markdown snippets within the list file, and Paimon will automatically render them during processing.</p>"},{"location":"monset/readme-block/#example-usage_1","title":"Example Usage:","text":"<pre><code>readme {\n    # My Project\n\n    This is an example of how you can use the `readme{}` block to include Markdown content directly in the Paimon list file.\n\n    ## Example Section\n\n    Here's an example of Python code:\n\n    ```python\n    def hello_world():\n        print(\"Hello, world!\")\n    ```\n\n    ![Example Image](https://example.com/image.png)\n}\n</code></pre> <p>In the above example:</p> <ul> <li>The content inside the <code>readme{}</code> block is treated as Markdown.</li> <li>It can include titles, paragraphs, code, images, and other Markdown-supported elements.</li> <li>During the processing of the list file, Scimon will render this Markdown content within the context of the list file.</li> </ul> <p>This provides a convenient way to include documentation, code examples, images, and other elements directly within the list file, keeping everything in one place and making it easy to maintain and share the content.</p>"},{"location":"monset/style/","title":"Style","text":"<p>Simply use the <code>style</code> variable followed by the valid URL of the CSS file, and this will apply the defined style to the document:</p> <pre><code>style \"https://example.com/path/to/custom_style.css\"\n</code></pre> <p>With this configuration, the CSS file at the specified URL will be used to style the generated PDF. Ensure the URL is accessible and points to a valid CSS file.</p>"},{"location":"monset/what-is/","title":"Monset","text":""},{"location":"monset/what-is/#what-is-monset","title":"What is Monset?","text":"<p>Monset is a language designed specifically for downloading files. It offers a streamlined syntax that makes the process of retrieving files from the internet straightforward and efficient. By focusing on simplicity, Monset ensures that users can quickly grasp its fundamentals and start downloading files with minimal effort.</p> <p>The key strength of Monset lies in its user-friendly design. The syntax is intuitive, reducing the learning curve typically associated with programming languages. This makes it accessible to both beginners and experienced developers, allowing them to integrate file downloading capabilities into their projects seamlessly. Monset abstracts the complexities involved in file transfers, providing a clear and concise way to handle downloads.</p>"},{"location":"monset/what-is/#summary","title":"Summary","text":"<ul> <li>Downloads Block</li> <li>Readme Block</li> <li>Commands Block</li> <li>Compress folder</li> <li>Open links</li> <li>Markdown render</li> <li>Style</li> <li>Print</li> </ul>"}]}